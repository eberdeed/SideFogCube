// A shader to provide refraction and reflection positional data.
// From www.learnopengl.com
#version 300 es
#extension GL_EXT_separate_shader_objects : enable

precision highp float;
precision highp int;


const int NUM_IMAGES = 16;
const int NUM_INSTANCES = 30;
const int NUM_VERTICES = 36;
struct TexIO {
    vec3 Normal;
    vec3 Position;
    vec2 TexCoord;
    float index1;
};
layout (packed) uniform itemData 
{
    vec4 instIndex[NUM_IMAGES * NUM_INSTANCES];
    mat4 instModel[NUM_IMAGES * NUM_INSTANCES];
};
out TexIO texData;
layout (location = 0) in vec3 position;
layout (location = 1) in vec3 normal;
layout (location = 2) in vec2 texCoord;

uniform mat4 view;
uniform mat4 projection;
uniform int repetition;
mat4 model;
void main()
{
    model = instModel[gl_InstanceID + (repetition * NUM_INSTANCES)];
    gl_Position = projection * view * model * vec4(position, 1.0f);
    texData.Normal = vec4(model * vec4(normal, 1.0)).xyz;
    texData.Position = vec4(model * vec4(position, 1.0)).xyz;
    texData.index1 = instIndex[gl_InstanceID + (repetition * NUM_INSTANCES)].x;
    texData.TexCoord = texCoord;
} 
